'use strict'
// Load the SDK
let RainbowSDK = require('../index');
// Define your configuration
let optionsBot00 = {
    "rainbow": {
        "host": "vberder.openrainbow.org",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "official",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "sandbox",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "web-sandbox.openrainbow.com",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
    },
    "credentials": {
//        "login": "alice@pgu.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "superadmin@openrainbow.org",  // The Rainbow email account to use
        //"login": "vincent00@vbe.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "rford@westworld.com",  // The Rainbow email account to use
//        "password": "Alcatel123!",   // The Rainbow associated password to use
//        "password": "Alcatel.01",   // The Rainbow associated password to use
        "password": "Password_123",   // The Rainbow associated password to use
        "login": "bot00@vbe.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "vincent.berder@al-enterprise.com",  // The Rainbow email account to use
//        "password": ""   // The Rainbow associated password to use
    },
    // Application identifier
    "application": {
        "appID": "", // The Rainbow Application Identifier - application must have a 'deployed' state
        "appSecret": "", // The Rainbow Application Secret - retrieved from developer hub
//        "appID": "dce4508010dc11e89911ade160c1b521", // The Rainbow Application Identifier - application must have a 'deployed' state
        //            "appSecret": "XjJZLOvVCfvcpPTmt0UtIRUQddKfCGbDGBEfdB3qfXvZCKpgb9k0HaxzfQxI6UAa", // The Rainbow Application Secret - retrieved from developer hub
        //   "appID": "27033b1001bd11e8843d6f00134e5189", // The Rainbow Application Identifier - application must have a 'deployed' state
        //   "appSecret": "FyZjGPsk7FXzWeyPz0vSfT1ar6XjZRz3DCoTxQ6mSpTvcOoND2CtcEWxcmkqGDJW", // The Rainbow Application Secret - retrieved from developer hub
    },

    // Proxy configuration
    proxy: {
        host: '192.168.254.49',
        port: 8080,
        protocol: 'http'
    },
    // Logs options
    "logs": {
        "enableConsoleLogs": true,              // Default: true
        "enableFileLogs": false,                // Default: false
        "color": true,
        "file": {
            "path": 'c:/temp/',     // Default path used
            "level": 'debug',                    // Default log level used
            "zippedArchive" : true,
            "maxSize" : '10m',
            "maxFiles" : 10
        }
    },
    // IM options
    "im": {
        "sendReadReceipt": true   // True to send the 'read' receipt automatically
    }
};

let optionsVincent00 = {
    "rainbow": {
        "host": "vberder.openrainbow.org",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "official",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "sandbox",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "web-sandbox.openrainbow.com",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
    },
    "credentials": {
//        "login": "alice@pgu.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "superadmin@openrainbow.org",  // The Rainbow email account to use
        "login": "vincent00@vbe.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "rford@westworld.com",  // The Rainbow email account to use
//        "password": "Alcatel123!",   // The Rainbow associated password to use
//        "password": "Alcatel.01",   // The Rainbow associated password to use
        "password": "Password_123",   // The Rainbow associated password to use
//        "login": "bot00@vbe.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "vincent.berder@al-enterprise.com",  // The Rainbow email account to use
//        "password": ""   // The Rainbow associated password to use
    },
    // Application identifier
    "application": {
        "appID": "", // The Rainbow Application Identifier - application must have a 'deployed' state
        "appSecret": "", // The Rainbow Application Secret - retrieved from developer hub
//        "appID": "dce4508010dc11e89911ade160c1b521", // The Rainbow Application Identifier - application must have a 'deployed' state
        //            "appSecret": "XjJZLOvVCfvcpPTmt0UtIRUQddKfCGbDGBEfdB3qfXvZCKpgb9k0HaxzfQxI6UAa", // The Rainbow Application Secret - retrieved from developer hub
        //   "appID": "27033b1001bd11e8843d6f00134e5189", // The Rainbow Application Identifier - application must have a 'deployed' state
        //   "appSecret": "FyZjGPsk7FXzWeyPz0vSfT1ar6XjZRz3DCoTxQ6mSpTvcOoND2CtcEWxcmkqGDJW", // The Rainbow Application Secret - retrieved from developer hub
    },

    // Proxy configuration
    proxy: {
        host: '192.168.254.49',
        port: 8080,
        protocol: 'http'
    },
    // Logs options
    "logs": {
        "enableConsoleLogs": true,              // Default: true
        "enableFileLogs": false,                // Default: false
        "color": true,
        "file": {
            "path": 'c:/temp/',     // Default path used
            "level": 'debug',                    // Default log level used
            "zippedArchive" : true,
            "maxSize" : '10m',
            "maxFiles" : 10
        }
    },
    // IM options
    "im": {
        "sendReadReceipt": true   // True to send the 'read' receipt automatically
    }
};


// Instantiate the SDK
let rainbowSDKBot00 = new RainbowSDK(optionsBot00);
let rainbowSDKVincent00 = new RainbowSDK(optionsVincent00);
let logger = rainbowSDKBot00._core.logger;
rainbowSDKVincent00._core.logger = rainbowSDKBot00._core.logger;

let calls = [];

function saveCall(call) {
    if (!calls[call.id]) {
        calls[call.id] = call;
    }
}

// Start the SDK
//rainbowSDKBot00.start();
rainbowSDKBot00.events.on('rainbow_onready', (data) => {
    // do something when the SDK is ready to be used
    logger.log("debug", "MAIN - rainbow_onready - rainbow onready", data, userinfo);
});

rainbowSDKBot00.events.on('rainbow_onstarted', (data) => {
    // do something when the SDK has been started
    logger.log("debug", "MAIN - rainbow_onstarted - rainbow onstarted", data);
})
;


rainbowSDKBot00.events.on('rainbow_oncallupdated', (data) => {
    logger.log("debug", "MAIN - rainbow_oncallupdated - rainbow call updated. State : " + data.status.value + ", displayName : " + data.contact.displayName, data);
    saveCall(data);
});

rainbowSDKBot00.events.on('rainbow_onvoicemessageupdated', (data) => {
    logger.log("debug", "MAIN - rainbow_onvoicemessageupdated - rainbow voice message updated.", data);
});

rainbowSDKBot00.events.on('rainbow_onbubbleinvitationreceived', (bubble) => {
    logger.log("debug", "MAIN - rainbow_onbubbleinvitationreceived - rainbow event received.", bubble, userinfo.loggedInUser);

    /*    bubble.users.forEach((user) => {
            if (user && user.jid_im === userinfo.loggedInUser.jid_im && user.status === "accepted") {
                rainbowSDKBot00.bubbles._sendInitialBubblePresence(bubble);
            }
        });
        // */

    /* rainbowSDKBot00.bubbles.acceptInvitationToJoinBubble(bubble).then((updatedBubble) => {
        logger.log("debug", "MAIN - acceptInvitationToJoinBubble - sent." ), bubble);
        // Do something once the invitation has been accepted
    }).catch((err) => {
        // Do something in case of error
        logger.log("error", "MAIN - acceptInvitationToJoinBubble - error : " ), err);
    });
    // */
});

rainbowSDKBot00.events.on('rainbow_onmessagereceiptreceived', (data) => {
    logger.log("debug", "MAIN - rainbow_onmessagereceiptreceived - rainbow event received.", data);
});

rainbowSDKBot00.events.on('rainbow_onmessagereceived', (data) => {
    logger.log("debug", "MAIN - rainbow_onmessagereceived - rainbow event received.", data);
});
let userinfo = {};
let rainbowSDKBot00Result = rainbowSDKBot00.start();
let rainbowSDKVincent00Result = rainbowSDKVincent00.start();
Promise.All([rainbowSDKBot00Result, rainbowSDKVincent00Result]).then((result) => {
    // Do something when the SDK is started
    logger.log("debug", "MAIN - rainbow SDK started result : "+ JSON.stringify(result)); //logger.colors.green(JSON.stringify(result)));
    userinfo = result;
    var list = rainbowSDKBot00.contacts.getAll();
    if (list) {
        list.forEach(function (contact) {
            logger.log("debug", "MAIN - [start    ] :: contact : ", contact);
        });
    } else {
        logger.log("debug", "MAIN - [start    ] :: contacts list empty");
    }

    var now = new Date().getTime();
    while(new Date().getTime() < now + (1000 )) {
        // do nothing
    }

    logger.log("debug", "MAIN - [start    ] :: after loop");

//    let utc = new Date().toJSON().replace(/-/g, '/');

    rainbowSDKBot00.telephony.makeCallByPhoneNumber("23026").then((data)=>{
        logger.log("debug", "MAIN - [makeCallByPhoneNumber] ", data);
    }).catch((error) => {
        logger.log("debug", "MAIN - [makeCallByPhoneNumber] error ", error);
    });

    setTimeout(() => {
        calls.forEach((c) => {
            rainbowSDKBot00.telephony.releaseCall(c);
        });
    }, 5000);
    // */

// */

    //rainbowSDKBot00.im.sendMessageToJid("test  sample node : ° ✈ :airplane::airplane: ) : " + utc , "6a2010ca31864df79b958113785492ae@vberder-all-in-one-dev-1.opentouch.cloud", "fr", "", "im");

    /* rainbowSDKBot00.admin.getAllCompanies().then((restresult) => {
         console.log("getAllCompanies companies", restresult);
     }); //*/


    /* rainbowSDKBot00.im.sendMessageToJid("😔😎😜😋👀😁😁🐣🐦🐷🐴🐮🦋🐗🙊🐧🐔🐻💿⏱⏱🎞🖨📻🇧🇴🇦🇱🇧🇼✡💔🚖🚗🚘🚜🛫🚔🚲🛫🛬\ntest  sample node : ° ✈ :airplane::airplane: ) : " + utc + ", randow : " + Math.random() * 10,

     "ca648c9e335f481d9b732dd99990b789@vberder-all-in-one-dev-1.opentouch.cloud", "fr", "", "im")
 /*    then((msg) => {
         "6a2010ca31864df79b958113785492ae@vberder-all-in-one-dev-1.opentouch.cloud", "fr", "", "im"
     )// *//* .then((msg) => {
        //console.log("message sent", msg);
        logger.log("debug", "MAIN - sendMessageToJid.then() message sent", msg);
    }).catch((err) => {
        console.log("Error while sending message ", err);
    }); // */


    /*
        rainbowSDKBot00.admin.getAllCompanies().then((restresult) => {
            //console.log("getAllCompanies companies", restresult);
            let companies = restresult.data;
            for (let company of companies) {
                //Object.keys(company).forEach( (companyKey) => {
                if (company.name && (company.name.indexOf("WestworldGuest_") !== -1 || company.name.indexOf("WestworldHost_") !== -1)) { //
                    console.log("WestworldXXXXX_ found : ", company);
                    rainbowSDKBot00.admin.removeCompany(company).then((data) => {
                        console.log("deleteCompany data", data);
                        //process.exit(-1);
                    }).catch((err) => {
                            if (err.code === 403) {
                                let strToFind = "still linked to user(s) : ";
                                let indexOf = err.details.indexOf(strToFind);
                                let userstoDelete = err.details.substring(indexOf + strToFind.length, err.details.length - 1);
                                //console.log ('delete user', strToFind, userstoDelete);
                                let usersIdTab = userstoDelete.split(',');
                                let removeUsers = [];
                                usersIdTab.forEach((id) => {
                                    console.log('delete user', id);
                                    removeUsers.push(rainbowSDKBot00.admin.deleteUser(id));
                                });

                                Promise.all(removeUsers).then(
                                    () => {
                                        rainbowSDKBot00.admin.removeCompany(company).then((data) => {
                                            console.log("deleteCompany data", data);
                                            //process.exit(-1);
                                        }).catch((err2) => {
                                                console.log("deleteCompany after user delete, error", err2);
                                            }
                                        );

                                    });
                            } else {
                                console.log("error during deleting company : ", err);
                            }
                            //process.exit(-1);
                        }
                    );
                    //break;
                }
                //});
            }
        }).catch((err) => {
            console.log("error during get all companies : ", err);
            //process.exit(-1);
        }); // */

    /*rainbowSDKBot00.admin.deleteCompany().then((companies) => {
        console.log("deleteCompany companies", companies);
    }); //*/

    //rainbowSDKBot00.stop();

})
;
