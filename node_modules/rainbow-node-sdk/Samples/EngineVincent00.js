'use strict'
// Load the SDK
let RainbowSDK = require('../index');
const Call = require("../lib/common/models/Call");
// Define your configuration
let optionsVincent00 = {
    "rainbow": {
        "host": "vberder.openrainbow.org",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "official",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "sandbox",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "web-sandbox.openrainbow.com",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
    },
    "credentials": {
//        "login": "alice@pgu.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "superadmin@openrainbow.org",  // The Rainbow email account to use
        //"login": "vincent00@vbe.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "rford@westworld.com",  // The Rainbow email account to use
//        "password": "Alcatel123!",   // The Rainbow associated password to use
//        "password": "Alcatel.01",   // The Rainbow associated password to use
        "password": "Password_123",   // The Rainbow associated password to use
        "login": "vincent00@vbe.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "vincent.berder@al-enterprise.com",  // The Rainbow email account to use
//        "password": ""   // The Rainbow associated password to use
    },
    // Application identifier
/*    "application": {
        "appID": "", // The Rainbow Application Identifier - application must have a 'deployed' state
        "appSecret": "", // The Rainbow Application Secret - retrieved from developer hub
//        "appID": "dce4508010dc11e89911ade160c1b521", // The Rainbow Application Identifier - application must have a 'deployed' state
        //            "appSecret": "XjJZLOvVCfvcpPTmt0UtIRUQddKfCGbDGBEfdB3qfXvZCKpgb9k0HaxzfQxI6UAa", // The Rainbow Application Secret - retrieved from developer hub
        //   "appID": "27033b1001bd11e8843d6f00134e5189", // The Rainbow Application Identifier - application must have a 'deployed' state
        //   "appSecret": "FyZjGPsk7FXzWeyPz0vSfT1ar6XjZRz3DCoTxQ6mSpTvcOoND2CtcEWxcmkqGDJW", // The Rainbow Application Secret - retrieved from developer hub
    },
// */
    // Proxy configuration
    proxy: {
        host: '192.168.254.49',
        port: 8080,
        protocol: 'http'
    },
    // Logs options
    "logs": {
        "enableConsoleLogs": true,              // Default: true
        "enableFileLogs": false,                // Default: false
        "color": true,
        "file": {
            "path": 'c:/temp/',     // Default path used
            "level": 'debug',                    // Default log level used
            "zippedArchive" : true,
            "maxSize" : '10m',
            "maxFiles" : 10
        }
    },
    // IM options
    "im": {
        "sendReadReceipt": true   // True to send the 'read' receipt automatically
    }
};

class EngineVincent00 {

    constructor() {
        // Instantiate the SDK
        this.rainbowSDK = new RainbowSDK(optionsVincent00);
        this.logger = this.rainbowSDK._core.logger;
        this.calls = [];
        this.userinfo = {};

    }

    saveCall(call) {
        let that = this;
        if (!that.calls[call.id]) {
            that.calls[call.id] = call;
        }
    }

    init () {
        let that = this;
        that.rainbowSDK.events.on('rainbow_onready', (data) => {
            // do something when the SDK is ready to be used
            that.logger.log("debug", "EngineVincent00 - rainbow_onready - rainbow onready", data, that.userinfo);
        });

        that.rainbowSDK.events.on('rainbow_onstarted', (data) => {
            // do something when the SDK has been started
            that.logger.log("debug", "EngineVincent00 - rainbow_onstarted - rainbow onstarted", data);
        });


        that.rainbowSDK.events.on('rainbow_oncallupdated', (data) => {
            that.logger.log("debug", "EngineVincent00 - rainbow_oncallupdated - rainbow call updated. State : " + that.logger.colors.cyan(data.status.value) + ", displayName : " + data.contact.displayName, data);
            that.saveCall(data);
            if (data.status === Call.Status.ACTIVE) {
                that.rainbowSDK.telephony.holdCall(data).then((dataanswerCall) => {
                    that.logger.log("debug", "EngineVincent00 - [holdCall] ", dataanswerCall);
                }).catch((error) => {
                    that.logger.log("debug", "EngineVincent00 - [holdCall] error ", error);
                });
            }
        });

        that.rainbowSDK.events.on('rainbow_onvoicemessageupdated', (data) => {
            that.logger.log("debug", "EngineVincent00 - rainbow_onvoicemessageupdated - rainbow voice message updated.", data);
        });

        that.rainbowSDK.events.on('rainbow_onbubbleinvitationreceived', (bubble) => {
            that.logger.log("debug", "EngineVincent00 - rainbow_onbubbleinvitationreceived - rainbow event received.", bubble, that.userinfo.loggedInUser);

            /*    bubble.users.forEach((user) => {
                    if (user && user.jid_im === userinfo.loggedInUser.jid_im && user.status === "accepted") {
                        this.rainbowSDK.bubbles._sendInitialBubblePresence(bubble);
                    }
                });
                // */

            /* this.rainbowSDK.bubbles.acceptInvitationToJoinBubble(bubble).then((updatedBubble) => {
                that.logger.log("debug", "EngineVincent00 - acceptInvitationToJoinBubble - sent." ), bubble);
                // Do something once the invitation has been accepted
            }).catch((err) => {
                // Do something in case of error
                that.logger.log("error", "EngineVincent00 - acceptInvitationToJoinBubble - error : " ), err);
            });
            // */
        });

        that.rainbowSDK.events.on('rainbow_onmessagereceiptreceived', (data) => {
            that.logger.log("debug", "EngineVincent00 - rainbow_onmessagereceiptreceived - rainbow event received.", data);
        });

        that.rainbowSDK.events.on('rainbow_onmessagereceived', (data) => {
            that.logger.log("debug", "EngineVincent00 - rainbow_onmessagereceived - rainbow event received.", data);
        });

        that.rainbowSDK.events.on('rainbow_onuserinvitereceived', (data) => {
            that.logger.log("debug", "EngineVincent00 - rainbow_onuserinvitereceived - rainbow event received.", data);
        });

        that.rainbowSDK.events.on('rainbow_onbubblecustomdatachanged', (data) => {
            that.logger.log("debug", "EngineVincent00 - rainbow_onbubblecustomdatachanged - rainbow event received.", data);
            that.getBubbleByJid();

        });



        return Promise.resolve();
    }

     start () {
        let that = this;
        return that.rainbowSDK.start().then((result) => {
            // Do something when the SDK is started
            that.logger.log("debug", "EngineVincent00 - rainbow SDK started result : " + JSON.stringify(result)); //this.logger.colors.green(JSON.stringify(result)));
            that.userinfo = result;
            var list = that.rainbowSDK.contacts.getAll();
            if (list) {
                list.forEach(function (contact) {
                    that.logger.log("debug", "EngineVincent00 - [start    ] :: contact : ", contact);
                    let avatar = that.rainbowSDK.contacts.getAvatarByContactId(contact.id, contact.lastAvatarUpdateDate);
                    that.logger.log("debug", "EngineVincent00 - [start    ] :: contact : ", contact, "avatar : ", avatar);
                });
            } else {
                that.logger.log("debug", "EngineVincent00 - [start    ] :: contacts list empty");
            }

            var now = new Date().getTime();
            while (new Date().getTime() < now + (1000)) {
                // do nothing
            }

            that.logger.log("debug", "EngineVincent00 - [start    ] :: after loop");

//    let utc = new Date().toJSON().replace(/-/g, '/');

            /*
            let activecall = {};
            let heldcall = {};
            activecall.contact = {}
            activecall.contact.displayName = "activecall";
            heldcall.contact = {}
            heldcall.contact.displayName = "activecall";
            that.rainbowSDK.telephony.conferenceCall(activecall, heldcall).then((data) => {
                that.logger.log("debug", "EngineVincent00 - [makeCallByPhoneNumber] ", data);
            }).catch((error) => {
                that.logger.log("debug", "EngineVincent00 - [makeCallByPhoneNumber] error ", error);
            });

            return ;

            that.rainbowSDK.telephony.makeCallByPhoneNumber("23026").then((data) => {
                that.logger.log("debug", "EngineVincent00 - [makeCallByPhoneNumber] ", data);
            }).catch((error) => {
                that.logger.log("debug", "EngineVincent00 - [makeCallByPhoneNumber] error ", error);
            });

            setTimeout(() => {
                that.logger.log("debug", "EngineVincent00 - it is time to release calls ");
                that.calls.forEach((c) => {
                    that.logger.log("debug", "EngineVincent00 - call to release : ", c);
                    //that.rainbowSDK.telephony.releaseCall(c);
                });
            }, 10000);
            // */

// */

            //that.rainbowSDK.im.sendMessageToJid("test  sample node : ° ✈ :airplane::airplane: ) : " + utc , "6a2010ca31864df79b958113785492ae@vberder-all-in-one-dev-1.opentouch.cloud", "fr", "", "im");

            /* that.rainbowSDK.admin.getAllCompanies().then((restresult) => {
                 console.log("getAllCompanies companies", restresult);
             }); //*/


            /* that.rainbowSDK.im.sendMessageToJid("😔😎😜😋👀😁😁🐣🐦🐷🐴🐮🦋🐗🙊🐧🐔🐻💿⏱⏱🎞🖨📻🇧🇴🇦🇱🇧🇼✡💔🚖🚗🚘🚜🛫🚔🚲🛫🛬\ntest  sample node : ° ✈ :airplane::airplane: ) : " + utc + ", randow : " + Math.random() * 10,

             "ca648c9e335f481d9b732dd99990b789@vberder-all-in-one-dev-1.opentouch.cloud", "fr", "", "im")
         /*    then((msg) => {
                 "6a2010ca31864df79b958113785492ae@vberder-all-in-one-dev-1.opentouch.cloud", "fr", "", "im"
             )// */
            /* .then((msg) => {
                    //console.log("message sent", msg);
                    that.logger.log("debug", "EngineVincent00 - sendMessageToJid.then() message sent", msg);
                }).catch((err) => {
                    console.log("Error while sending message ", err);
                }); // */


            // that.deleteAllTempCompanies();
            //that.ackAllMessages();
            //that.getBubbleById();
            //that.getBubbleByJid();
            //that.setBubbleCustomData();
            that.addToContactsList();
            //that.rainbowSDK.stop();

        });
    }

    stop () {
        let that = this;
        that.rainbowSDK.stop();
    }

    addToContactsList() {
        let that = this;

        that.rainbowSDK.contacts.getContactByLoginEmail("vincent04@vbe.test.openrainbow.net").then((contact) => {
            that.logger.log("debug", "EngineVincent00 - getContactByLoginEmail - contact found : ", contact);
            that.rainbowSDK.contacts.addToContactsList(contact).then((result) => {
                that.logger.log("debug", "EngineVincent00 - addToContactsList - result : ", result);
                //that.rainbowSDK.bubbles.setBubbleCustomData(bubble, {});
                //var now = new Date().getTime();
            });
        });
    }

    setBubbleCustomData() {
        let that = this;

        that.rainbowSDK.bubbles.getBubbleByJid("room_0f5e4e62e3ef4e43bc991dde6c53bc98@muc.vberder-all-in-one-dev-1.opentouch.cloud").then((bubble) => {
            that.logger.log("debug", "EngineVincent00 - getBubbleByJid - bubble found : ", bubble);
            //that.rainbowSDK.bubbles.setBubbleCustomData(bubble, {});
            let now = new Date().getTime();
            that.rainbowSDK.bubbles.setBubbleCustomData(bubble, {'mypersonnaldata' : 'valueofmypersonnaldata', 'updateDate': now});
        });
    }

    getBubbleByJid() {
        let that = this;

        that.rainbowSDK.bubbles.getBubbleByJid("room_0f5e4e62e3ef4e43bc991dde6c53bc98@muc.vberder-all-in-one-dev-1.opentouch.cloud").then((bubble) => {
            that.logger.log("debug", "EngineVincent00 - getBubbleByJid - bubble found : ", bubble);
        });
    }

    getBubbleById() {
        let that = this;

        that.rainbowSDK.bubbles.getBubbleById("5b1e9fe0de198601f7e4ba1f").then((bubble) => {
            that.logger.log("debug", "EngineVincent00 - getBubbleById - bubble found : ", bubble);
        });
    }

    ackAllMessages() {
        let that = this;
        that.rainbowSDK.conversations.getServerConversations().then( (conversations) => {
            conversations
                .forEach(function (conversationData) {
                    that.logger.log("debug", "EngineVincent00 - [ackAllMessages    ] :: conversation ", conversationData );
                });
        });

       that.rainbowSDK.conversations.ackAllMessages("5b3f652e5c6445bb810076c3");

    }

    deleteAllTempCompanies() {
        let that = this;
        that.rainbowSDK.admin.getAllCompanies().then((restresult) => {
            console.log("getAllCompanies companies", restresult);
            let companies = restresult.data;
            for (let company of companies) {
                //Object.keys(company).forEach( (companyKey) => {
                if (company.name && (company.name.indexOf("WestworldGuest_") !== -1 || company.name.indexOf("WestworldHost_") !== -1)) { //
                    console.log("WestworldXXXXX_ found : ", company);
                    that.rainbowSDK.admin.removeCompany(company).then((data) => {
                        console.log("deleteCompany data", data);
                        //process.exit(-1);
                    }).catch((err) => {
                            if (err.code === 403) {
                                let strToFind = "still linked to user(s) : ";
                                let indexOf = err.details.indexOf(strToFind);
                                let userstoDelete = err.details.substring(indexOf + strToFind.length, err.details.length - 1);
                                //console.log ('delete user', strToFind, userstoDelete);
                                let usersIdTab = userstoDelete.split(',');
                                let removeUsers = [];
                                usersIdTab.forEach((id) => {
                                    console.log('delete user', id);
                                    removeUsers.push(that.rainbowSDK.admin.deleteUser(id));
                                });

                                Promise.all(removeUsers).then(
                                    () => {
                                        that.rainbowSDK.admin.removeCompany(company).then((data) => {
                                            console.log("deleteCompany data", data);
                                            //process.exit(-1);
                                        }).catch((err2) => {
                                                console.log("deleteCompany after user delete, error", err2);
                                            }
                                        );

                                    });
                            } else {
                                console.log("error during deleting company : ", err);
                            }
                            //process.exit(-1);
                        }
                    );
                    //break;
                }
                //});
            }
        }).catch((err) => {
            console.log("error during get all companies : ", err);
            //process.exit(-1);
        }); // */

        /*that.rainbowSDK.admin.deleteCompany().then((companies) => {
            console.log("deleteCompany companies", companies);
        }); //*/

    }

}

module.exports = EngineVincent00;