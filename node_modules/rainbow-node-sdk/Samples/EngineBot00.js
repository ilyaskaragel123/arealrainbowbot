'use strict'
// Load the SDK
let RainbowSDK = require('../index');
// Define your configuration
let optionsBot00 = {
    "rainbow": {
        "host": "vberder.openrainbow.org",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "official",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "sandbox",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
//        "host": "web-sandbox.openrainbow.com",                      // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
    },
    "credentials": {
//        "login": "alice@pgu.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "superadmin@openrainbow.org",  // The Rainbow email account to use
        //"login": "vincent00@vbe.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "rford@westworld.com",  // The Rainbow email account to use
//        "password": "Alcatel123!",   // The Rainbow associated password to use
//        "password": "Alcatel.01",   // The Rainbow associated password to use
        "password": "Password_123",   // The Rainbow associated password to use
        "login": "vincent00@vbe.test.openrainbow.net",  // The Rainbow email account to use
//        "login": "vincent.berder@al-enterprise.com",  // The Rainbow email account to use
//        "password": ""   // The Rainbow associated password to use
    },
    // Application identifier
    "application": {
        "appID": "", // The Rainbow Application Identifier - application must have a 'deployed' state
        "appSecret": "", // The Rainbow Application Secret - retrieved from developer hub
//        "appID": "dce4508010dc11e89911ade160c1b521", // The Rainbow Application Identifier - application must have a 'deployed' state
        //            "appSecret": "XjJZLOvVCfvcpPTmt0UtIRUQddKfCGbDGBEfdB3qfXvZCKpgb9k0HaxzfQxI6UAa", // The Rainbow Application Secret - retrieved from developer hub
        //   "appID": "27033b1001bd11e8843d6f00134e5189", // The Rainbow Application Identifier - application must have a 'deployed' state
        //   "appSecret": "FyZjGPsk7FXzWeyPz0vSfT1ar6XjZRz3DCoTxQ6mSpTvcOoND2CtcEWxcmkqGDJW", // The Rainbow Application Secret - retrieved from developer hub
    },

    // Proxy configuration
    proxy: {
        host: '192.168.254.49',
        port: 8080,
        protocol: 'http'
    },
    // Logs options
    "logs": {
        "enableConsoleLogs": true,              // Default: true
        "enableFileLogs": false,                // Default: false
        "color": true,
        "file": {
            "path": 'c:/temp/',     // Default path used
            "level": 'debug',                    // Default log level used
            "zippedArchive" : true,
            "maxSize" : '10m',
            "maxFiles" : 10
        }
    },
    // IM options
    "im": {
        "sendReadReceipt": true   // True to send the 'read' receipt automatically
    }
};

class EngineBot00 {

    constructor() {
        // Instantiate the SDK
        this.rainbowSDK = new RainbowSDK(optionsBot00);
        this.logger = this.rainbowSDK._core.logger;
        this.calls = [];
        this.userinfo = {};

    }

    saveCall(call) {
        let that = this;
        if (!that.calls[call.id]) {
            that.calls[call.id] = call;
        }
    }

    init () {
        let that = this;
        that.rainbowSDK.events.on('rainbow_onready', (data) => {
            // do something when the SDK is ready to be used
            that.logger.log("debug", "MAIN - rainbow_onready - rainbow onready", data, that.userinfo);
        });

        that.rainbowSDK.events.on('rainbow_onstarted', (data) => {
            // do something when the SDK has been started
            that.logger.log("debug", "MAIN - rainbow_onstarted - rainbow onstarted", data);
        });


        that.rainbowSDK.events.on('rainbow_oncallupdated', (data) => {
            that.logger.log("debug", "MAIN - rainbow_oncallupdated - rainbow call updated. State : " + that.logger.colors.cyan(data.status.value) + ", displayName : " + data.contact.displayName, data);
            that.saveCall(data);
        });

        that.rainbowSDK.events.on('rainbow_onvoicemessageupdated', (data) => {
            that.logger.log("debug", "MAIN - rainbow_onvoicemessageupdated - rainbow voice message updated.", data);
        });

        that.rainbowSDK.events.on('rainbow_onbubbleinvitationreceived', (bubble) => {
            that.logger.log("debug", "MAIN - rainbow_onbubbleinvitationreceived - rainbow event received.", bubble, that.userinfo.loggedInUser);

            /*    bubble.users.forEach((user) => {
                    if (user && user.jid_im === userinfo.loggedInUser.jid_im && user.status === "accepted") {
                        this.rainbowSDK.bubbles._sendInitialBubblePresence(bubble);
                    }
                });
                // */

            /* this.rainbowSDK.bubbles.acceptInvitationToJoinBubble(bubble).then((updatedBubble) => {
                that.logger.log("debug", "MAIN - acceptInvitationToJoinBubble - sent." ), bubble);
                // Do something once the invitation has been accepted
            }).catch((err) => {
                // Do something in case of error
                that.logger.log("error", "MAIN - acceptInvitationToJoinBubble - error : " ), err);
            });
            // */
        });

        that.rainbowSDK.events.on('rainbow_onmessagereceiptreceived', (data) => {
            that.logger.log("debug", "MAIN - rainbow_onmessagereceiptreceived - rainbow event received.", data);
        });

        that.rainbowSDK.events.on('rainbow_onmessagereceived', (data) => {
            that.logger.log("debug", "MAIN - rainbow_onmessagereceived - rainbow event received.", data);
        });

        return Promise.resolve();
    }

     start () {
        let that = this;
        return that.rainbowSDK.start().then((result) => {
            // Do something when the SDK is started
            that.logger.log("debug", "MAIN - rainbow SDK started result : " + JSON.stringify(result)); //this.logger.colors.green(JSON.stringify(result)));
            that.userinfo = result;
            var list = that.rainbowSDK.contacts.getAll();
            if (list) {
                list.forEach(function (contact) {
                    that.logger.log("debug", "MAIN - [start    ] :: contact : ", contact);
                });
            } else {
                that.logger.log("debug", "MAIN - [start    ] :: contacts list empty");
            }

            var now = new Date().getTime();
            while (new Date().getTime() < now + (1000)) {
                // do nothing
            }

            that.logger.log("debug", "MAIN - [start    ] :: after loop");

//    let utc = new Date().toJSON().replace(/-/g, '/');

            that.rainbowSDK.telephony.makeCallByPhoneNumber("23026").then((data) => {
                that.logger.log("debug", "MAIN - [makeCallByPhoneNumber] ", data);
            }).catch((error) => {
                that.logger.log("debug", "MAIN - [makeCallByPhoneNumber] error ", error);
            });

            setTimeout(() => {
                that.logger.log("debug", "MAIN - it is time to release calls ");
                that.calls.forEach((c) => {
                    that.logger.log("debug", "MAIN - call to release : ", c);
                    //that.rainbowSDK.telephony.releaseCall(c);
                });
            }, 10000);
            // */

// */

            //that.rainbowSDK.im.sendMessageToJid("test  sample node : ° ✈ :airplane::airplane: ) : " + utc , "6a2010ca31864df79b958113785492ae@vberder-all-in-one-dev-1.opentouch.cloud", "fr", "", "im");

            /* that.rainbowSDK.admin.getAllCompanies().then((restresult) => {
                 console.log("getAllCompanies companies", restresult);
             }); //*/


            /* that.rainbowSDK.im.sendMessageToJid("😔😎😜😋👀😁😁🐣🐦🐷🐴🐮🦋🐗🙊🐧🐔🐻💿⏱⏱🎞🖨📻🇧🇴🇦🇱🇧🇼✡💔🚖🚗🚘🚜🛫🚔🚲🛫🛬\ntest  sample node : ° ✈ :airplane::airplane: ) : " + utc + ", randow : " + Math.random() * 10,

             "ca648c9e335f481d9b732dd99990b789@vberder-all-in-one-dev-1.opentouch.cloud", "fr", "", "im")
         /*    then((msg) => {
                 "6a2010ca31864df79b958113785492ae@vberder-all-in-one-dev-1.opentouch.cloud", "fr", "", "im"
             )// */
            /* .then((msg) => {
                    //console.log("message sent", msg);
                    that.logger.log("debug", "MAIN - sendMessageToJid.then() message sent", msg);
                }).catch((err) => {
                    console.log("Error while sending message ", err);
                }); // */


            /*
                that.rainbowSDK.admin.getAllCompanies().then((restresult) => {
                    //console.log("getAllCompanies companies", restresult);
                    let companies = restresult.data;
                    for (let company of companies) {
                        //Object.keys(company).forEach( (companyKey) => {
                        if (company.name && (company.name.indexOf("WestworldGuest_") !== -1 || company.name.indexOf("WestworldHost_") !== -1)) { //
                            console.log("WestworldXXXXX_ found : ", company);
                            that.rainbowSDK.admin.removeCompany(company).then((data) => {
                                console.log("deleteCompany data", data);
                                //process.exit(-1);
                            }).catch((err) => {
                                    if (err.code === 403) {
                                        let strToFind = "still linked to user(s) : ";
                                        let indexOf = err.details.indexOf(strToFind);
                                        let userstoDelete = err.details.substring(indexOf + strToFind.length, err.details.length - 1);
                                        //console.log ('delete user', strToFind, userstoDelete);
                                        let usersIdTab = userstoDelete.split(',');
                                        let removeUsers = [];
                                        usersIdTab.forEach((id) => {
                                            console.log('delete user', id);
                                            removeUsers.push(that.rainbowSDK.admin.deleteUser(id));
                                        });

                                        Promise.all(removeUsers).then(
                                            () => {
                                                that.rainbowSDK.admin.removeCompany(company).then((data) => {
                                                    console.log("deleteCompany data", data);
                                                    //process.exit(-1);
                                                }).catch((err2) => {
                                                        console.log("deleteCompany after user delete, error", err2);
                                                    }
                                                );

                                            });
                                    } else {
                                        console.log("error during deleting company : ", err);
                                    }
                                    //process.exit(-1);
                                }
                            );
                            //break;
                        }
                        //});
                    }
                }).catch((err) => {
                    console.log("error during get all companies : ", err);
                    //process.exit(-1);
                }); // */

            /*that.rainbowSDK.admin.deleteCompany().then((companies) => {
                console.log("deleteCompany companies", companies);
            }); //*/

            //that.rainbowSDK.stop();

        });
    }

    stop () {
        let that = this;
        that.rainbowSDK.stop();
    }
}

module.exports = EngineBot00;